// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SF.Infrastructure;

namespace SF.Infrastructure.Migrations
{
    [DbContext(typeof(SFDbContext))]
    partial class SFDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SF.Domain.Entities.AdminEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(512)")
                        .HasMaxLength(512);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(512)")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "MasterOfPuppets",
                            PasswordHash = new byte[] { 245, 118, 89, 111, 219, 76, 234, 229, 151, 177, 131, 188, 169, 101, 58, 158, 8, 4, 215, 11, 224, 167, 3, 2, 160, 202, 135, 125, 37, 212, 140, 41, 236, 32, 34, 68, 1, 51, 55, 243, 27, 100, 146, 224, 151, 67, 32, 110, 151, 97, 84, 18, 80, 9, 55, 250, 17, 45, 100, 134, 198, 0, 229, 55 },
                            PasswordSalt = new byte[] { 252, 227, 231, 127, 101, 15, 116, 42, 144, 252, 178, 132, 222, 159, 237, 250, 155, 137, 42, 17, 248, 104, 214, 124, 58, 10, 29, 191, 147, 128, 162, 131, 27, 130, 67, 61, 68, 244, 14, 186, 66, 207, 64, 120, 247, 79, 246, 117, 140, 71, 190, 200, 32, 129, 225, 158, 86, 55, 103, 81, 45, 153, 248, 52, 197, 59, 87, 148, 44, 157, 190, 25, 217, 119, 84, 123, 22, 17, 109, 227, 174, 237, 245, 200, 98, 225, 196, 89, 105, 201, 137, 228, 112, 170, 107, 120, 234, 29, 206, 83, 124, 109, 220, 159, 99, 167, 14, 87, 81, 114, 70, 133, 254, 41, 166, 138, 181, 91, 154, 122, 248, 222, 164, 36, 128, 133, 32, 10 }
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.BandEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Bands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Metallica — американський метал-гурт з Лос-Анджелеса, Каліфорнія, яка грає в жанрі треш-метал та хеві-метал. Разом з Slayer, Megadeth та Anthrax входять до «великої четвірки треш-металу». Заснований в 1981 році, коли Джеймс Гетфілд відгукнувся на оголошення барабанщика Ларса Ульріха, розміщене у місцевій газеті.",
                            Name = "Metallica",
                            PhotoURL = "https://pimg.mycdn.me/getImage?disableStub=true&type=VIDEO_S_720&skipBlack=true&url=http%3A%2F%2Fi.mycdn.me%2Fimage%3Fid%3D880168864240%26t%3D50%26plc%3DWEB%26tkn%3D*YEVP-NmKvHWbv6RBRnyQxd8Vizs&signatureToken=hb9KMZKxbZF4GYN-Vq8Tuw"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bring Me The Horizon — англійський металкор гурт з міста Шеффілда, заснований в 2004 році. В цей час група складається з вокаліста Олівера Сайкса, гітариста Лі Малії, басиста Метта Кіна, барабанщика Метта Ніколлса і клавішника Джордана Фіша. На сьогодні гурт співпрацює з лейблами RCA Records та Epitaph Records.",
                            Name = "Bring Me the Horizon",
                            PhotoURL = "https://i2.wp.com/sova.ponominalu.ru/wp-content/uploads/2019/10/Bring-Me-The-Horizon.jpg?fit=1548%2C1024&ssl=1"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lord of the Lost - німецький готичний металевий гурт з Гамбурга. Гурт створив співак і фронтмен Кріс Хармс.",
                            Name = "Lord of the Lost",
                            PhotoURL = "https://fainemisto.com.ua/wp-content/uploads/2019/07/1530649229.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Led Zeppelin - британський рок-гурт, що вважається одним із засновників хард-року та хеві-металу. Led Zeppelin досі високо шанується за музичні досягнення, нестандартність, комерційний успіх і широкий вплив.",
                            Name = "Led Zeppelin",
                            PhotoURL = "https://kanal5.com.mk/uploads/10-5526-.jpg"
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.BandGenreEntity", b =>
                {
                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BandId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BandGenres");

                    b.HasData(
                        new
                        {
                            BandId = 1,
                            GenreId = 7
                        },
                        new
                        {
                            BandId = 1,
                            GenreId = 8
                        },
                        new
                        {
                            BandId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            BandId = 2,
                            GenreId = 3
                        },
                        new
                        {
                            BandId = 2,
                            GenreId = 9
                        },
                        new
                        {
                            BandId = 3,
                            GenreId = 1
                        },
                        new
                        {
                            BandId = 3,
                            GenreId = 7
                        },
                        new
                        {
                            BandId = 4,
                            GenreId = 1
                        },
                        new
                        {
                            BandId = 4,
                            GenreId = 7
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "rostik1804@gmail.com",
                            FirstName = "Ростислав",
                            LastName = "Байцар"
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.FestivalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("Festivals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "https://www.google.com.ua/maps/place/%D0%90%D0%B5%D1%80%D0%BE%D0%B4%D1%80%D0%BE%D0%BC+%C2%AB%D0%A6%D1%83%D0%BD%D1%96%D0%B2%C2%BB+-+%D1%81%D1%82%D1%80%D0%B8%D0%B1%D0%BA%D0%B8+%D0%B7+%D0%BF%D0%B0%D1%80%D0%B0%D1%88%D1%83%D1%82%D0%BE%D0%BC/@49.8211939,23.6848984,16.48z/data=!4m5!3m4!1s0x473b1e99ccdc9dd9:0xb5a7d47bdfe021fc!8m2!3d49.8215501!4d23.6873576?hl=uk",
                            Year = "2020"
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hard Rock"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pop Rock"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Folk Rock"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Punk Rock"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Psychedelic Rock"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Heavy Metal"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Thrash"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hip Hop"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Rep"
                        },
                        new
                        {
                            Id = 12,
                            Name = "R & В"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Jazz"
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.PartnerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Partners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Samsung — південнокорейська транснаціональна компанія-конгломерат, головний офіс якої розташований у Сеулі, Південна Корея. Компанія є найбільшим південнокорейським чеболем.",
                            Name = "Samsung"
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.PartnerFestivalEntity", b =>
                {
                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.HasKey("PartnerId", "FestivalId");

                    b.HasIndex("FestivalId");

                    b.ToTable("PartnerFestivals");

                    b.HasData(
                        new
                        {
                            PartnerId = 1,
                            FestivalId = 1
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.PerformanceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("BeginingTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("FestivalId");

                    b.HasIndex("StageId");

                    b.ToTable("Performances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BandId = 1,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 30, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = new TimeSpan(0, 1, 20, 0, 0),
                            FestivalId = 1,
                            StageId = 1
                        },
                        new
                        {
                            Id = 2,
                            BandId = 2,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 29, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = new TimeSpan(0, 1, 10, 0, 0),
                            FestivalId = 1,
                            StageId = 1
                        },
                        new
                        {
                            Id = 3,
                            BandId = 3,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 30, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = new TimeSpan(0, 1, 20, 0, 0),
                            FestivalId = 1,
                            StageId = 3
                        },
                        new
                        {
                            Id = 4,
                            BandId = 4,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 30, 20, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = new TimeSpan(0, 1, 10, 0, 0),
                            FestivalId = 1,
                            StageId = 2
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.PurchaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BarCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TicketId");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BarCode = new Guid("67be354d-5d93-41f9-859a-1f8106670bb6"),
                            CustomerId = 1,
                            IsAvailable = true,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            BarCode = new Guid("ed7be15e-cfce-4bbd-afd9-228caced78a7"),
                            CustomerId = 1,
                            IsAvailable = true,
                            TicketId = 8
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.StageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main Stage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "White Stage"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Black Stage"
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.TicketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("BeginingTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = 3,
                            FestivalId = 1,
                            Price = 1000,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = 2,
                            FestivalId = 1,
                            Price = 700,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 29, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = 2,
                            FestivalId = 1,
                            Price = 700,
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = 1,
                            FestivalId = 1,
                            Price = 500,
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 29, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = 1,
                            FestivalId = 1,
                            Price = 500,
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 30, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = 1,
                            FestivalId = 1,
                            Price = 500,
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = 3,
                            FestivalId = 1,
                            Price = 200,
                            Type = 3
                        },
                        new
                        {
                            Id = 8,
                            BeginingTime = new DateTimeOffset(new DateTime(2020, 8, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Duration = 3,
                            FestivalId = 1,
                            Price = 300,
                            Type = 2
                        });
                });

            modelBuilder.Entity("SF.Domain.Entities.BandGenreEntity", b =>
                {
                    b.HasOne("SF.Domain.Entities.BandEntity", "Band")
                        .WithMany("BandGenres")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SF.Domain.Entities.GenreEntity", "Genre")
                        .WithMany("BandGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SF.Domain.Entities.PartnerFestivalEntity", b =>
                {
                    b.HasOne("SF.Domain.Entities.FestivalEntity", "Festival")
                        .WithMany("PartnerFestivals")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SF.Domain.Entities.PartnerEntity", "Partner")
                        .WithMany("PartnerFestivals")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SF.Domain.Entities.PerformanceEntity", b =>
                {
                    b.HasOne("SF.Domain.Entities.BandEntity", "Band")
                        .WithMany("Performances")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SF.Domain.Entities.FestivalEntity", "Festival")
                        .WithMany("Performances")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SF.Domain.Entities.StageEntity", "Stage")
                        .WithMany("Performances")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SF.Domain.Entities.PurchaseEntity", b =>
                {
                    b.HasOne("SF.Domain.Entities.CustomerEntity", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SF.Domain.Entities.TicketEntity", "Ticket")
                        .WithMany("Purchases")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SF.Domain.Entities.TicketEntity", b =>
                {
                    b.HasOne("SF.Domain.Entities.FestivalEntity", "Festival")
                        .WithMany("Tickets")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
